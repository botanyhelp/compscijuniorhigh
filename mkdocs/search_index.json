{
    "docs": [
        {
            "location": "/", 
            "text": "Binary\n\n\nPython\n\n\nTyping", 
            "title": "Home"
        }, 
        {
            "location": "/binary/", 
            "text": "CompSci Binary Class\n\n\nBinary Representation\n\n\nComputers deal with bits.  Here we see 8 bits in a row, one bit per square:\n\n\n\n\nWe might interpret that to mean the number 45 (\n32+8+4+1\n).\n\n\nComputers are also \nbyte-oriented\n.  A byte is 8bits and is the smallest thing that a computer will consider.  Here we see bytes, one byte (8bits) per blue square:\n\n\n\n\nThe names to the left of the blue squares are some common data types: char bool int double long.  The last one with 5 bytes is an array of 5 char.  The sixth one in the list above is a \npointer to int\n.  We will talk about arrays and pointers another time. \n\n\nNotice that the boolean (\nbool\n in the picture above) takes a whole byte.  Boolean is a data type that has two representations: \nTRUE\n or \nFALSE\n.  Therefore, to represent a boolean, we should only need one bit \n1=TRUE\n or \n0=FALSE\n.  Using 8bits (a whole byte!) to represent a boolean is a waste of 7 bits.  But computers are \nbyte-oriented\n.  The smallest unit that will be considered is a byte, not a bit.  \n\n\nNotice that some data types (like \nlong int\n in the picture above) take several bytes.  To represent large numbers, like 32767, you're going to need some more bytes.  \n\n\nHere we see a representation of a number, (sint16, signed integer 16 bits) that is using two bytes, 16 bits, to represent one number.  Notice also that the red bit is being used to allow for the representation of negative numbers.  It takes a whole bit to tell the \nsign\n of the number (\nnegative=1\n or \npositive=0\n):\n\n\n\n\nThe list below shows the names and maximum/minimum values for numbers that are using increasing numbers of bytes to represent the number (the CHAR uses one byte, LONG uses 8 bytes):\n\n\n\n\nThe minimum value of CHAR = -128\n\n\nThe maximum value of CHAR = 127\n\n\nThe minimum value of UNSIGNED CHAR = 0\n\n\nThe maximum value of UNSIGNED CHAR = 255\n\n\nThe minimum value of SHORT INT = -32768\n\n\nThe maximum value of SHORT INT = 32767\n\n\nThe minimum value of INT = -2147483648\n\n\nThe maximum value of INT = 2147483647\n\n\nThe minimum value of CHAR = -128\n\n\nThe maximum value of CHAR = 127\n\n\nThe minimum value of LONG = -9223372036854775808\n\n\nThe maximum value of LONG = 9223372036854775807\n\n\nThe minimum value of UNSIGNED LONG = 0\n\n\nThe maximum value of UNSIGNED LONG = 18446744073709551616 \n\n\n\n\nThose first four, CHAR and UNSIGNED CHAR, (\nin the list above\n) would look like these bits:\n\n\n\n\n10000000\n\n\n01111111\n\n\n00000000\n\n\n11111111\n\n\n\n\nThose last two UNSIGNED LONGs would look like these bits:\n\n\n\n\n0000000000000000000000000000000000000000000000000000000000000000\n\n\n1111111111111111111111111111111111111111111111111111111111111111\n\n\n\n\nHere we see commonly used data types and how many bytes are required to use them:\n\n\n\n\nNotice that if you are treating those 64 bits as an UNSIGNED LONG, then there is no way to represent negative 1 (-1) or any negative number.  \n\n\nHow those 64 bits are treated is up to you.  If you want an extremely large positive integer, then UNSIGNED LONG might be a good choice.  \n\n\nOther ways you might want to treat 64 bits include:\n\n\n\n\nan array of 8 UNSIGNED CHAR, eight 8-bit numbers\n\n\nan array of 8 SIGNED CHAR, eight 8-bit numbers\n\n\nan array of 4 SHORT int, four 16-bit numbers\n\n\nan array of 2 LONG, two 32-bit numbers\n\n\n\n\nASCII\n\n\nA much more common way to deal with 64 bits is to treat it as text.  \n\n\nDid you know that billions of computers think that this 64 bit stream means something very specific:\n\n\n0011100001110100011010000100011101110010011000010110010001100101\n\n\nIt means precisely this:\n\n\n8thGrade\n\n\nThere is a long standing agreement that specific bytes (8bits) represent specific letters/characters.  Its called the ASCII table and it looks like this:\n\n\n\n\nIf you break that 64bit number into eight 8bit numbers like this:\n\n\n00111000 01110100 01101000 01000111 01110010 01100001 01100100 01100101 \n\n\nThen you can use the ASCII table to convert those 8 numbers to the letters that they represent.  Lets take the first 8bit number: \n\n\n00111000\n\n\nThat number as an integer is 56 (32+16+8).  Using the ASCII table above, we can see that the \nChar\n represented by the decimal number 56 is \"8\".  Lets take the second 8bit number from above:\n\n\n01110100 \n\n\nThat number as an integer is 116 (64+32+16+4).  Using the ASCII table above, we can see that the \nChar\n represented by the decimal number 116 is \"t\", lowercase t.  \n\n\n8 t h G r a d e\n\n\nIf you grow tired of the ASCII table, you can instead treat those 64bits as a large integer, and get this large number:\n\n\n4067991019493352549\n\n\n\n\nHow many bits do you need to represent DNA, which has 4 nucleotides GACT?\n\n\nHow many bits do you need to represent all of the world's characters (not just ABC123) including Chinese, Arabic and Klingon?  \n\n\nHow would that happen, how would you expand beyond ASCII?\n\n\n\n\nReals\n\n\nSo far we've been talking about integers.  Representing \nreal\n numbers (numbers with decimal places) is also required.  Reals are also represented with bits.  We'll leave reals for another day but the representation looks like this:\n\n\n\n\nObjects\n\n\nWe've been covering \"standard\" ways of treating 64 bits.  You can treat 64 bits however you want.  We could decide that those 64 bits represent a game character, like this:\n\n\n\n\nbit #1, the bit on the far right side, represents whether the character is GOOD=1 or EVIL=0\n\n\nbit #2, the second bit from the far right side, represents whether the character is FEMALE=1 or MALE=0\n\n\nbit #3, the third bit from the far right side, represents whether the character is HUMAN=1 or NONHUMAN=0\n\n\nbit #4, the fourth bit from the far right side, represents whether the character is AWAKE=1 or ASLEEP=0\n\n\n\n\nUnder this treatment, this number:\n\n\n\n\n0000000000000000000000000000000000000000000000000000000000001111\n\n\n\n\n..would represent a GOOD, FEMALE, HUMAN and AWAKE.  This number:\n\n\n\n\n0000000000000000000000000000000000000000000000000000000000000000\n\n\n\n\n..would represent an EVIL, MALE, NONHUMAN and ASLEEP.  It might be easier to talk about these characters by saying that:\n\n\n\n\ncharacter 1 is a 15\n\n\ncharacter 2 is a 0\n\n\n\n\n..any program that understood the format would know four important characteristics of these characters. We know that a 3 represents a character that is GOOD FEMALE, NONHUMAN and ASLEEP. \n\n\nWhat is the state of a character that is a 6?\n\n\n\n\nUsing bits to represent something besides numbers is very common and is the basis of \nobjects\n in programming.  An \nobject\n typically has a state (like a \"1\" character has a state of: GOOD, MALE, NONHUMAN and ASLEEP).  An object also usually has \nbehavior\n represented in those bits.  For example, we could use some bits to represent a function \ncastSpell()\n.  castSpell() might do different things based on the state of the object.  For example, it might not do anything at all if the character doing the castSpell() has a state of ASLEEP.  \n\n\nHow castSpell() is represented as bits is a complex topic that we won't cover.  As programmers, we care about the syntax of the programming language.  As programmers, we want to write code that does the things that castSpell() should do.  As programmers, we do NOT care how the actual bits look inside of castSpell() when its running on the machine.  We do care about the python, for example, that we write, and we do care about what happens when we run the python program.  We want to see, for example, when we run the python, that any sleeping characters are unable to cast any spells.  As computer scientists, we do care about the representation of information (\ndata structures\n) and what to do with it (\nalgorithms\n). \n\n\nCredits\n\n\nThe excellent and educational images shown here are kindly shared by wikimedia, Colorado State CS, Stack Exchange, SlideShare: \n\n\nhttps://upload.wikimedia.org/wikibooks/en/f/f5/Byte45.png\n\n\nhttp://www.cs.colostate.edu/~anderson/cs253/wiki/lib/exe/fetch.php?w=400\nmedia=lectures:typespic.png\n\n\nhttp://i.stack.imgur.com/LqMAx.png\n\n\nhttp://image.slidesharecdn.com/dweiss-sizeof-120509022400-phpapp02/95/sizeofobject-how-much-memory-objects-take-on-jvms-and-when-this-may-matter-11-728.jpg\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/2000px-ASCII-Table-wide.svg.png\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/IEEE_754_Double_Floating_Point_Format.svg/2000px-IEEE_754_Double_Floating_Point_Format.svg.png", 
            "title": "Binary"
        }, 
        {
            "location": "/binary/#compsci-binary-class", 
            "text": "", 
            "title": "CompSci Binary Class"
        }, 
        {
            "location": "/binary/#binary-representation", 
            "text": "Computers deal with bits.  Here we see 8 bits in a row, one bit per square:   We might interpret that to mean the number 45 ( 32+8+4+1 ).  Computers are also  byte-oriented .  A byte is 8bits and is the smallest thing that a computer will consider.  Here we see bytes, one byte (8bits) per blue square:   The names to the left of the blue squares are some common data types: char bool int double long.  The last one with 5 bytes is an array of 5 char.  The sixth one in the list above is a  pointer to int .  We will talk about arrays and pointers another time.   Notice that the boolean ( bool  in the picture above) takes a whole byte.  Boolean is a data type that has two representations:  TRUE  or  FALSE .  Therefore, to represent a boolean, we should only need one bit  1=TRUE  or  0=FALSE .  Using 8bits (a whole byte!) to represent a boolean is a waste of 7 bits.  But computers are  byte-oriented .  The smallest unit that will be considered is a byte, not a bit.    Notice that some data types (like  long int  in the picture above) take several bytes.  To represent large numbers, like 32767, you're going to need some more bytes.    Here we see a representation of a number, (sint16, signed integer 16 bits) that is using two bytes, 16 bits, to represent one number.  Notice also that the red bit is being used to allow for the representation of negative numbers.  It takes a whole bit to tell the  sign  of the number ( negative=1  or  positive=0 ):   The list below shows the names and maximum/minimum values for numbers that are using increasing numbers of bytes to represent the number (the CHAR uses one byte, LONG uses 8 bytes):   The minimum value of CHAR = -128  The maximum value of CHAR = 127  The minimum value of UNSIGNED CHAR = 0  The maximum value of UNSIGNED CHAR = 255  The minimum value of SHORT INT = -32768  The maximum value of SHORT INT = 32767  The minimum value of INT = -2147483648  The maximum value of INT = 2147483647  The minimum value of CHAR = -128  The maximum value of CHAR = 127  The minimum value of LONG = -9223372036854775808  The maximum value of LONG = 9223372036854775807  The minimum value of UNSIGNED LONG = 0  The maximum value of UNSIGNED LONG = 18446744073709551616    Those first four, CHAR and UNSIGNED CHAR, ( in the list above ) would look like these bits:   10000000  01111111  00000000  11111111   Those last two UNSIGNED LONGs would look like these bits:   0000000000000000000000000000000000000000000000000000000000000000  1111111111111111111111111111111111111111111111111111111111111111   Here we see commonly used data types and how many bytes are required to use them:   Notice that if you are treating those 64 bits as an UNSIGNED LONG, then there is no way to represent negative 1 (-1) or any negative number.    How those 64 bits are treated is up to you.  If you want an extremely large positive integer, then UNSIGNED LONG might be a good choice.    Other ways you might want to treat 64 bits include:   an array of 8 UNSIGNED CHAR, eight 8-bit numbers  an array of 8 SIGNED CHAR, eight 8-bit numbers  an array of 4 SHORT int, four 16-bit numbers  an array of 2 LONG, two 32-bit numbers", 
            "title": "Binary Representation"
        }, 
        {
            "location": "/binary/#ascii", 
            "text": "A much more common way to deal with 64 bits is to treat it as text.    Did you know that billions of computers think that this 64 bit stream means something very specific:  0011100001110100011010000100011101110010011000010110010001100101  It means precisely this:  8thGrade  There is a long standing agreement that specific bytes (8bits) represent specific letters/characters.  Its called the ASCII table and it looks like this:   If you break that 64bit number into eight 8bit numbers like this:  00111000 01110100 01101000 01000111 01110010 01100001 01100100 01100101   Then you can use the ASCII table to convert those 8 numbers to the letters that they represent.  Lets take the first 8bit number:   00111000  That number as an integer is 56 (32+16+8).  Using the ASCII table above, we can see that the  Char  represented by the decimal number 56 is \"8\".  Lets take the second 8bit number from above:  01110100   That number as an integer is 116 (64+32+16+4).  Using the ASCII table above, we can see that the  Char  represented by the decimal number 116 is \"t\", lowercase t.    8 t h G r a d e  If you grow tired of the ASCII table, you can instead treat those 64bits as a large integer, and get this large number:  4067991019493352549   How many bits do you need to represent DNA, which has 4 nucleotides GACT?  How many bits do you need to represent all of the world's characters (not just ABC123) including Chinese, Arabic and Klingon?    How would that happen, how would you expand beyond ASCII?", 
            "title": "ASCII"
        }, 
        {
            "location": "/binary/#reals", 
            "text": "So far we've been talking about integers.  Representing  real  numbers (numbers with decimal places) is also required.  Reals are also represented with bits.  We'll leave reals for another day but the representation looks like this:", 
            "title": "Reals"
        }, 
        {
            "location": "/binary/#objects", 
            "text": "We've been covering \"standard\" ways of treating 64 bits.  You can treat 64 bits however you want.  We could decide that those 64 bits represent a game character, like this:   bit #1, the bit on the far right side, represents whether the character is GOOD=1 or EVIL=0  bit #2, the second bit from the far right side, represents whether the character is FEMALE=1 or MALE=0  bit #3, the third bit from the far right side, represents whether the character is HUMAN=1 or NONHUMAN=0  bit #4, the fourth bit from the far right side, represents whether the character is AWAKE=1 or ASLEEP=0   Under this treatment, this number:   0000000000000000000000000000000000000000000000000000000000001111   ..would represent a GOOD, FEMALE, HUMAN and AWAKE.  This number:   0000000000000000000000000000000000000000000000000000000000000000   ..would represent an EVIL, MALE, NONHUMAN and ASLEEP.  It might be easier to talk about these characters by saying that:   character 1 is a 15  character 2 is a 0   ..any program that understood the format would know four important characteristics of these characters. We know that a 3 represents a character that is GOOD FEMALE, NONHUMAN and ASLEEP.   What is the state of a character that is a 6?  Using bits to represent something besides numbers is very common and is the basis of  objects  in programming.  An  object  typically has a state (like a \"1\" character has a state of: GOOD, MALE, NONHUMAN and ASLEEP).  An object also usually has  behavior  represented in those bits.  For example, we could use some bits to represent a function  castSpell() .  castSpell() might do different things based on the state of the object.  For example, it might not do anything at all if the character doing the castSpell() has a state of ASLEEP.    How castSpell() is represented as bits is a complex topic that we won't cover.  As programmers, we care about the syntax of the programming language.  As programmers, we want to write code that does the things that castSpell() should do.  As programmers, we do NOT care how the actual bits look inside of castSpell() when its running on the machine.  We do care about the python, for example, that we write, and we do care about what happens when we run the python program.  We want to see, for example, when we run the python, that any sleeping characters are unable to cast any spells.  As computer scientists, we do care about the representation of information ( data structures ) and what to do with it ( algorithms ).", 
            "title": "Objects"
        }, 
        {
            "location": "/binary/#credits", 
            "text": "The excellent and educational images shown here are kindly shared by wikimedia, Colorado State CS, Stack Exchange, SlideShare:   https://upload.wikimedia.org/wikibooks/en/f/f5/Byte45.png  http://www.cs.colostate.edu/~anderson/cs253/wiki/lib/exe/fetch.php?w=400 media=lectures:typespic.png  http://i.stack.imgur.com/LqMAx.png  http://image.slidesharecdn.com/dweiss-sizeof-120509022400-phpapp02/95/sizeofobject-how-much-memory-objects-take-on-jvms-and-when-this-may-matter-11-728.jpg  https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/2000px-ASCII-Table-wide.svg.png  https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/IEEE_754_Double_Floating_Point_Format.svg/2000px-IEEE_754_Double_Floating_Point_Format.svg.png", 
            "title": "Credits"
        }, 
        {
            "location": "/python/", 
            "text": "CompSci Python 3 Class\n\n\n\n\nassignment means =\n\n\ndata types\n\n\nfunction print and print()\n\n\nlist\n\n\ndictionary\n\n\ncontrol\n\n\nfunction definition\n\n\nfunction calling\n\n\nfirst program\n\n\n\n\nassignment means =\n\n\n\n\nnumber\n\n\nstate = 1\n\n\n\n\n\n\nboolean\n\n\nhuman = True\n\n\n\n\n\n\nstring\n\n\nname = \"Tom\"\n\n\n\n\n\n\nlist  ordered sequence of values\n\n\ngrades = [1,2,3,4,5,6,8,7]\n\n\n\n\n\n\ntuple immutable ordered sequence of values\n\n\nplanets = (\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n\n\n\n\n\n\nset  unordered bags of values\n\n\nletters = {\"s\",\"h\",\"e\",\"l\",\"a\",\"h\"}\n\n\n\n\n\n\ndictionary    unordered bags of key-value pairs\n\n\npeople = {\"george\":\"washington\", \"barack\":\"obama\"}\n\n\n\n\n\n\n\n\ncommon assignment errors:\n\n\n\n\n\"instrument\" = \"cello\"   \nBAD, variable names are letters only no quotes allowed, do this instead: instrument = \"cello\"\n\n\ninstrument = cello   \nBAD, cello is not an existing value yet and cannot be assigned, do this instead: instrument = \"cello\"\n\n\ninstrument type = \"cello\"   \nBAD, variable names are letters only, no spaces allowed, do this instead: instrumentType = \"cello\"\n\n\nprint = \"Hello World\"   \nBAD, print is a variable name that is already in use, do this instead: print_variable = \"hello world\"\n\n\n\n\ndata types\n\n\n\n\nnumber\n\n\n1\n\n\n3.14159\n\n\n-44\n\n\n0\n\n\n3/4 \n\n\n\n\n\n\nboolean \n\n\nTrue\n\n\nFalse\n\n\n\n\n\n\nstring\n\n\n\"good woman child\"\n\n\n\"\u597d\u5973\u5b50\"\n\n\n\n\n\n\nlist\n\n\n[1,2,3]\n\n\n[\"a\",\"b\",\"c\"]\n\n\n[\"one\", 2, True]\n\n\n\n\n\n\ntuple\n\n\n(\"alpha\",\"omega\")\n\n\n\n\n\n\ndictionary\n\n\n{\"a\":1,\"b\":2}\n\n\n{1:\"a\",2:\"b\"}\n\n\n\n\n\n\nset\n\n\n{1,2,3}\n\n\n\n\n\n\n\n\nfunction print and print()\n\n\n\n\nprint is a function\n\n\nprint() is calling a function\n\n\n\n\nname=\nTom\n\nprint(\nhello world\n)\nprint(name)\n\n\n\n\nlist\n\n\ngrades = [1,2,3,4,5,6,8,7]\ngrades[0]\ngrades[1]\ngrades[7]\ngrades[7] = 8\ngrades[6] = 7\ngrades[7]\ngrades[1:3]\ngrades[:2]\ngrades[:2]\ngrades[2:]\nlen(grades)\ngrades.append(9)\nlen(grades)\n# grades[9] = 10  **BAD no place at grades[9] to put value ~IndexError: list assignment index out of range~**\n\n\n\n\ndictionary\n\n\npeople = {\ngeorge\n:\nwashington\n, \nbarack\n:\nobama\n}\npeople\npeople[\nulysses\n] = \ngrant\n \npeople[\ngeorge\n] = \nbush\n\n#people[\ndonald\n]    **BAD, no such key in people dictionary ~KeyError: 'donald'~**\n\n\n\n\ncontrol\n\n\n\n\npython code starts executing on the first line and continues line by line until last line and program ends\n\n\n\n\ncontrol allows you to control program flow (skip lines, rerun lines)\n\n\n\n\n\n\nif, elif, else  (condition, colon, indentation)\n\n\n\n\n\n\nstate=1\nhuman=True\nif(human==True):\n    print(\nHello\n)\nelse:\n    print(\nPeace\n)\nif(human==True):\n    if(state==50):\n         print(\nHowdy, you must be from Hawaii\n)\n    elif(state==1):\n         print(\nHello, you must be from Delaware\n)\n    else:\n         print(\nHello, are you Canadian?\n)\nelse:\n    print(\nPeace\n)\n\n\n\n\n\n\nfor \n\n\n\n\nfor planet in planets:\n    print w, len(w)\n\ngrades = [1,2,3,4,5,6,8,7]\nplanets = (\nMercury\n,\nVenus\n,\nEarth\n,\nMars\n,\nJupiter\n,\nSaturn\n,\nUranus\n,\nNeptune\n)\nfor item in range(len(grades)):\n    print(grades[item])\n\n\npeople = {\ngeorge\n:\nwashington\n, \nbarack\n:\nobama\n}\nfor key in people.keys():\n    print key, people[key]\n\n\n\n\n\n\nwhile\n\n\n\n\ni = 5\nwhile(i\n0):\n    print i\n    i=i-1    # what happens if we forget to decrement i?\nprint(\nblast off\n)\n\n\n\n\nfunction definition\n\n\ndef fib(n):\n     \nPrint a Fibonacci series up to n.\n\n     a, b = 0, 1\n     while a \n n:\n         print a,\n         a, b = b, a+b\n\n\n\n\nfunction calling\n\n\nfib(2000)\n\n\n\n\nfirst program\n\n\nSUFFIXES = {1000: ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            1024: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']}\n\ndef approximate_size(size, a_kilobyte_is_1024_bytes=True):\n    '''Convert a file size to human-readable form.\n\n    Keyword arguments:\n    size -- file size in bytes\n    a_kilobyte_is_1024_bytes -- if True (default), use multiples of 1024\n                                if False, use multiples of 1000\n\n    Returns: string\n\n    '''\n    if size \n 0:\n        raise ValueError('number must be non-negative')\n\n    multiple = 1024 if a_kilobyte_is_1024_bytes else 1000\n    for suffix in SUFFIXES[multiple]:\n        size /= multiple\n        if size \n multiple:\n            return '{0:.1f} {1}'.format(size, suffix)\n\n    raise ValueError('number too large')\n\nif __name__ == '__main__':\n    print(approximate_size(1000000000000, False))\n    print(approximate_size(1000000000000))\n\n\n\n\ninstruction 1\n\n\n\n\ntopics\n\n\nedit python code with linux leafpad or macOSX TextWrangler or Textedit\n\n\nrun python program \npython Documents/myProgram.py\n\n\nedit program, save program, run program, edit,save,run,edit,save,run\n\n\nvariable names\n\n\nprint function\n\n\nnumbers, strings\n\n\nlist\n\n\ndictionary\n\n\nloop \nfor item in listOfItems\n, \ncolon:\n, \nindentation\n\n\n\n\n\n\n\n\nname = \nTom\n\nprint(name)\nmyList = [1,2,3,4]\nfor item in myList:\n    print(item)\n\nmyList[3]=\nfour\n\nfor item in myList:\n    print(item)\n\npeople = {\ngeorge\n:\nw\n,\nbarack\n:\no\n}\nfor key in people.keys():\n    print(key,people[key])\n\npeople[\nhillary\n]=\nc\n\nfor key in people.keys():\n    print(key,people[key])\n\n\n\n\n\n\n\nexcercises (note: codes like shown are written on chalkboard and students type and run at their PC)\n\n\nassign a double quoted string value to a variable\n\n\nprint that variable\n\n\nassign a list of values \nuse square brackets\n to a variable\n\n\nloop through that list and print each value \nfor item in list:\n, \nindentation\n\n\nassign a dictionary of key value pairs \nuse curly brackets and :\n to a variable\n\n\nloop through that dictionary and print each key and value \nfor key in dictionary.keys():\n, \nindentation\n\n\n\n\n\n\n\n\ninstruction 2\n\n\n\n\ntopics\n\n\npython console versus writing program\n\n\nreview python basic programming from last week\n\n\ncontrol with if \nif elif elif elif else\n\n\nmodules \nimport math\n\n\nstring concatenation with \n+\n\n\ndefine function\n\n\ncall function\n\n\nget input from user of the program with \ninput()\n function\n\n\n\n\n\n\n\n\nStart python console by typing \npython\n in terminal\n\n\nwidth = 20\nheight = 5*9\nwidth * height\n\n\n\n\nStop python console by typing \nCTRL D\n or by calling \nquit()\n function\n\n\nString concatenation\n\n\n# This is a comment because of the # symbol\nphrase = \nhello\n\nprint(phrase)\nphrase = phrase+\n world\n\nprint(phrase)\n\n\n\n\nControl program with if elif else\n\n\nx = 99\nif x \n 0:\n      print ('the number is negative')\nelif x == 0:\n      print ('the number is zero')\nelif x == 1:\n      print ('the number is one')\nelse:\n      print ('More')\n\n\n\n\nMake and assign list, loop through list, print each value and len(value)\n\n\na = ['cat', 'frog', 'horse']\nfor x in a:\n    print (x, len(x))\n\n\n\n\nUse python modules\n\n\nimport math\nprint(math.sin(1))\n\n\n\n\nDefine a function called sum\n\n\ndef sum(x,y):\n    total = x+y\n\n\n\n\nCall function sum with sum(3,4)\n\n\nsum(3,4)\n\n\n\n\nUse input() to gather input from the user of the program\n\n\nx = int(input(\nEnter an integer: \n))\nif(x\n=0):\n    print(\npostive\n)\nelse:\n    print(\nnegative\n)\n\n\n\n\n\n\nexcercises (note: codes should already be in existing program for reference, or also on board)\n\n\nstart python console with \npython\n in terminal\n\n\nenter python code in console \nprint(\"hello\")\n and hit ENTER\n\n\nstop python console with \nCTRL-D\n in terminal or \nquit()\n function\n\n\nassign a list of strings to a variable\n\n\nloop through that variable and print each item\n\n\nassign a list of key value pairs to a dictionary\n\n\nloop through that dictionary and print each key and value\n\n\nconcatenate strings and print the concatenated result\n\n\ndefine a function called subract(x,y) that takes two arguments and returns one result\n\n\ncall subtract(5,2) and confirm correct result\n\n\ncall subtract(2,5) and confirm correct result\n\n\ngather input from user and report if positive elif negative else zero", 
            "title": "Python"
        }, 
        {
            "location": "/python/#compsci-python-3-class", 
            "text": "assignment means =  data types  function print and print()  list  dictionary  control  function definition  function calling  first program", 
            "title": "CompSci Python 3 Class"
        }, 
        {
            "location": "/python/#assignment-means", 
            "text": "number  state = 1    boolean  human = True    string  name = \"Tom\"    list  ordered sequence of values  grades = [1,2,3,4,5,6,8,7]    tuple immutable ordered sequence of values  planets = (\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")    set  unordered bags of values  letters = {\"s\",\"h\",\"e\",\"l\",\"a\",\"h\"}    dictionary    unordered bags of key-value pairs  people = {\"george\":\"washington\", \"barack\":\"obama\"}     common assignment errors:   \"instrument\" = \"cello\"    BAD, variable names are letters only no quotes allowed, do this instead: instrument = \"cello\"  instrument = cello    BAD, cello is not an existing value yet and cannot be assigned, do this instead: instrument = \"cello\"  instrument type = \"cello\"    BAD, variable names are letters only, no spaces allowed, do this instead: instrumentType = \"cello\"  print = \"Hello World\"    BAD, print is a variable name that is already in use, do this instead: print_variable = \"hello world\"", 
            "title": "assignment means ="
        }, 
        {
            "location": "/python/#data-types", 
            "text": "number  1  3.14159  -44  0  3/4     boolean   True  False    string  \"good woman child\"  \"\u597d\u5973\u5b50\"    list  [1,2,3]  [\"a\",\"b\",\"c\"]  [\"one\", 2, True]    tuple  (\"alpha\",\"omega\")    dictionary  {\"a\":1,\"b\":2}  {1:\"a\",2:\"b\"}    set  {1,2,3}", 
            "title": "data types"
        }, 
        {
            "location": "/python/#function-print-and-print", 
            "text": "print is a function  print() is calling a function   name= Tom \nprint( hello world )\nprint(name)", 
            "title": "function print and print()"
        }, 
        {
            "location": "/python/#list", 
            "text": "grades = [1,2,3,4,5,6,8,7]\ngrades[0]\ngrades[1]\ngrades[7]\ngrades[7] = 8\ngrades[6] = 7\ngrades[7]\ngrades[1:3]\ngrades[:2]\ngrades[:2]\ngrades[2:]\nlen(grades)\ngrades.append(9)\nlen(grades)\n# grades[9] = 10  **BAD no place at grades[9] to put value ~IndexError: list assignment index out of range~**", 
            "title": "list"
        }, 
        {
            "location": "/python/#dictionary", 
            "text": "people = { george : washington ,  barack : obama }\npeople\npeople[ ulysses ] =  grant  \npeople[ george ] =  bush \n#people[ donald ]    **BAD, no such key in people dictionary ~KeyError: 'donald'~**", 
            "title": "dictionary"
        }, 
        {
            "location": "/python/#control", 
            "text": "python code starts executing on the first line and continues line by line until last line and program ends   control allows you to control program flow (skip lines, rerun lines)    if, elif, else  (condition, colon, indentation)    state=1\nhuman=True\nif(human==True):\n    print( Hello )\nelse:\n    print( Peace )\nif(human==True):\n    if(state==50):\n         print( Howdy, you must be from Hawaii )\n    elif(state==1):\n         print( Hello, you must be from Delaware )\n    else:\n         print( Hello, are you Canadian? )\nelse:\n    print( Peace )   for    for planet in planets:\n    print w, len(w)\n\ngrades = [1,2,3,4,5,6,8,7]\nplanets = ( Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune )\nfor item in range(len(grades)):\n    print(grades[item])\n\n\npeople = { george : washington ,  barack : obama }\nfor key in people.keys():\n    print key, people[key]   while   i = 5\nwhile(i 0):\n    print i\n    i=i-1    # what happens if we forget to decrement i?\nprint( blast off )", 
            "title": "control"
        }, 
        {
            "location": "/python/#function-definition", 
            "text": "def fib(n):\n      Print a Fibonacci series up to n. \n     a, b = 0, 1\n     while a   n:\n         print a,\n         a, b = b, a+b", 
            "title": "function definition"
        }, 
        {
            "location": "/python/#function-calling", 
            "text": "fib(2000)", 
            "title": "function calling"
        }, 
        {
            "location": "/python/#first-program", 
            "text": "SUFFIXES = {1000: ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            1024: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']}\n\ndef approximate_size(size, a_kilobyte_is_1024_bytes=True):\n    '''Convert a file size to human-readable form.\n\n    Keyword arguments:\n    size -- file size in bytes\n    a_kilobyte_is_1024_bytes -- if True (default), use multiples of 1024\n                                if False, use multiples of 1000\n\n    Returns: string\n\n    '''\n    if size   0:\n        raise ValueError('number must be non-negative')\n\n    multiple = 1024 if a_kilobyte_is_1024_bytes else 1000\n    for suffix in SUFFIXES[multiple]:\n        size /= multiple\n        if size   multiple:\n            return '{0:.1f} {1}'.format(size, suffix)\n\n    raise ValueError('number too large')\n\nif __name__ == '__main__':\n    print(approximate_size(1000000000000, False))\n    print(approximate_size(1000000000000))", 
            "title": "first program"
        }, 
        {
            "location": "/python/#instruction-1", 
            "text": "topics  edit python code with linux leafpad or macOSX TextWrangler or Textedit  run python program  python Documents/myProgram.py  edit program, save program, run program, edit,save,run,edit,save,run  variable names  print function  numbers, strings  list  dictionary  loop  for item in listOfItems ,  colon: ,  indentation     name =  Tom \nprint(name)\nmyList = [1,2,3,4]\nfor item in myList:\n    print(item)\n\nmyList[3]= four \nfor item in myList:\n    print(item)\n\npeople = { george : w , barack : o }\nfor key in people.keys():\n    print(key,people[key])\n\npeople[ hillary ]= c \nfor key in people.keys():\n    print(key,people[key])   excercises (note: codes like shown are written on chalkboard and students type and run at their PC)  assign a double quoted string value to a variable  print that variable  assign a list of values  use square brackets  to a variable  loop through that list and print each value  for item in list: ,  indentation  assign a dictionary of key value pairs  use curly brackets and :  to a variable  loop through that dictionary and print each key and value  for key in dictionary.keys(): ,  indentation", 
            "title": "instruction 1"
        }, 
        {
            "location": "/python/#instruction-2", 
            "text": "topics  python console versus writing program  review python basic programming from last week  control with if  if elif elif elif else  modules  import math  string concatenation with  +  define function  call function  get input from user of the program with  input()  function     Start python console by typing  python  in terminal  width = 20\nheight = 5*9\nwidth * height  Stop python console by typing  CTRL D  or by calling  quit()  function  String concatenation  # This is a comment because of the # symbol\nphrase =  hello \nprint(phrase)\nphrase = phrase+  world \nprint(phrase)  Control program with if elif else  x = 99\nif x   0:\n      print ('the number is negative')\nelif x == 0:\n      print ('the number is zero')\nelif x == 1:\n      print ('the number is one')\nelse:\n      print ('More')  Make and assign list, loop through list, print each value and len(value)  a = ['cat', 'frog', 'horse']\nfor x in a:\n    print (x, len(x))  Use python modules  import math\nprint(math.sin(1))  Define a function called sum  def sum(x,y):\n    total = x+y  Call function sum with sum(3,4)  sum(3,4)  Use input() to gather input from the user of the program  x = int(input( Enter an integer:  ))\nif(x =0):\n    print( postive )\nelse:\n    print( negative )   excercises (note: codes should already be in existing program for reference, or also on board)  start python console with  python  in terminal  enter python code in console  print(\"hello\")  and hit ENTER  stop python console with  CTRL-D  in terminal or  quit()  function  assign a list of strings to a variable  loop through that variable and print each item  assign a list of key value pairs to a dictionary  loop through that dictionary and print each key and value  concatenate strings and print the concatenated result  define a function called subract(x,y) that takes two arguments and returns one result  call subtract(5,2) and confirm correct result  call subtract(2,5) and confirm correct result  gather input from user and report if positive elif negative else zero", 
            "title": "instruction 2"
        }, 
        {
            "location": "/typing/", 
            "text": "CompSci Typing Class\n\n\n\n\nGoals\n\n\nBuild muscle memory\n\n\nHit correct key without thinking\n\n\nType without ever looking at the keyboard\n\n\nAlways use correct finger to strike correct key\n\n\n\n\n\n\nHand Position\n\n\nBoth index fingers should be on the home keys, F and J, feel for the raised dot on F and J, without looking\n\n\n8 fingers, left to right, are always on the home keys: ASDF JKL;\n\n\nBoth thumbs should rest on the SPACE bar\n\n\nFingers should be curved\n\n\nBoth palms should float above the keyboard\n\n\nMost typists use their right thumb to strike the SPACE bar\n\n\nAlways practice without looking at the keyboard (cover your hands with cardboard)\n\n\nAge doesn't matter (3rd graders okay) but hand size does matter, especially the range of the pinkies\n\n\n\n\n\n\nFinger Placement\n\n\n\n\n\n\n\n\nBody positioning\n\n\nNotice (\nin the drawing below\n) that her wrists DO NOT rest on the desk in front of the keyboard\n\n\nAlternatively, it is okay to have your elbows \nbelow the keyboard\n and your wrists resting on the desk in front of the keyboard\n\n\n\n\n\n\nNotice that her chair sits high enough so that her elbows are at about the same height as the keyboard\n\n\nAlternatively, it is okay to have your chair lower such that your elbows are below the keyboard and your wrists rest upon the desk in front of the keyboard\n\n\n\n\n\n\nNotice her good posture\n\n\nNotice that her feet are on the ground (get a footrest or large book if necessary)\n\n\nNotice that her knee angle is 90 degrees\n\n\nNotice that her elbow angle is 90 degrees\n\n\nNotice that her seat back angle is 90 degrees\n\n\n\n\n\n\n\n\n\n\nThe Almena Method, Almena King of Jamaica\n\n\n\n\nLearning where the keys are on the keyboard mnenomically\n\n\nLetters, from top to bottom, from left pinky to right pinky:\n\n\nqaz wsx edc rtf tgb yhn ujm ik, ol. p\n\n\n\n\n\n\nJingles per finger\n\n\nIndex fingers\n\n\nRun From Vicky To Get Betty\n RFVTGB\n\n\nYou Have Nothing, Uncle Joe's Mad\n YHNUJM\n\n\n\n\n\n\nMiddle fingers\n\n\nEvery Dollar Counts\n EDC\n\n\nI'm King Comma\n IK,\n\n\n\n\n\n\nRing fingers\n\n\nWant Something Extra\n WSX\n\n\nOver Longer Periods\n OL.\n\n\n\n\n\n\nPinkies\n\n\nQuiet Aunt Zelda\n QAZ\n\n\nPretty\n P\n\n\n\n\n\n\n\n\n\n\n\n\nActivities CAPS LOCK ON\n\n\n\n\nActivity 1\n\n\nTHIS IS WHAT I LIKE\n\n\nTHIS IS WHAT I LOVE\n\n\nTHIS IS WHAT I NEED\n\n\n\n\n\n\nActivity 2\n\n\nTHERE ARE SOME THINGS I LIKE\n\n\nTHERE ARE SOME THINGS I LOVE\n\n\nTHERE ARE SOME THINGS I NEED\n\n\n\n\n\n\nActivity 3\n\n\nGOOD THINGS COME TO THOSE WHO WAIT\n\n\nGOOD THINGS COME TO THOSE WHO SHARE\n\n\nGOOD THINGS COME TO THOSE WHO SHARE WHILE WAITING\n\n\n\n\n\n\nActivity 4\n\n\nI LIKE TO READ GOOD BOOKS, THEN RELAX\n\n\nI LIKE TO READ GOOD BOOKS, THEN DOZE OFF\n\n\nI LIKE TO READ GOOD BOOKS, THEN ENJOY A DRIVE\n\n\n\n\n\n\nActivity 5, home row\n\n\nasdfg ;lkjh\n\n\nfjgh jfhg a;\n\n\nasdfg hjkl;\n\n\nfdsa ;lkj jfhg\n\n\n\n\n\n\nActivity 99 , at the bottom, just do it, make a list of difficult words and do them ten times each\n\n\n\n\n\n\nResources\n\n\nhttp://almenatyping.com/\n\n\nhttps://www.youtube.com/watch?v=Df8qKN0H36k\n\n\nCredits:\n\n\nThe excellent and educational images shown here are kindly shared by wikimedia:\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/3/35/Computer_Workstation_Variables.jpg\n\n\nhttp://www.psgtech.edu/Tamilkeyboard/images/old/2.png\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/QWERTY-home-keys-position.svg/2000px-QWERTY-home-keys-position.svg.png\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Touch_typing.svg/790px-Touch_typing.svg.png\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/7/79/FingerHandPosUSA.gif\n\nActivity 99 is from Arthur Mee\u2019s Children\u2019s Encyclopedia, Volume 1\n\n\nLicense:\n\n\nMany images and text found here were created and shared by wikipedia editors under this license:\n\nCreative Commons Attribution-ShareAlike License\n\n\n\n\nI, Nature, give to you, to be yours for ever and ever, the right\nto the free enjoyment of this world. I give to you the years that\nare before you, and the world that is about you.\n\n\nI give to you the Sun by day and the Moon and stars by night, with\nthe power to wake as the Earth rolls into the light of the Sun, and\npower to sleep when the night comes.\n\n\nI give to you the beauty of the Earth in the golden hour of dawn,\nwith the vision of the Sun as it climbs above the hills, with the\nglow of fire across the meadow and the sparkle on the river that\nruns past. The sight of the new stirring of the life of the world,\nthe sound of all moving things that praise their Maker, the feeling\nthat uplifts the heart as the light breaks on another day, are\nyours.\n\n\nI give you the eager hope of spring, with the right to see the slow\ndisrobing of the winter earth and the slow unveiling of her secret\ntreasury. I give to you the untold glory of a summer\u2019s day, with\nthe touch of God in every lane and the fire of the Sun in every\nrose. I give to you the eternal promise of autumn, with the faith\nof all growing things in the life that will come again. I give to\nyou the peace of the Earth on a winter\u2019s day, with the robe of\nstainless white not made with hands. I give to you the full glory\nof the changing year, and perfect trust in the ways of God that\nhave never failed upon the Earth.\n\n\nI give to you the quiet of the hilltop, the vision of the smiling\nworld that opens out below, the green fields that stretch far away\nuntil they touch the sky. I give you the path that brings you to\nthe valley, with the trees that rise like silent sentinels to guard\nthe peace of the woodland walks where you may be alone. I give you\nthe thrill of heights where a man can think no mean thing, and the\ncalm of the hidden places where little children seek and find the\nkey of the Kingdom of Heaven.\n\n\nThe leaping joy of spring, the glittering dance of summer, the\nrustling of the leaves in autumn, the stillness and strengthening\nof the winter, I give to you. I give to you the ceaseless wonder\nof the day and night, and the seasons as they pass.\n\n\nI give you the song that has been in the world since the birds began\nto sing, the joyous hymn of the lark and the plaintive music of the\nnightingale: the beauty that has been on Earth since flowers began\nto peep: the silver lamps that have hung in the sky since the stars\nbegan to shine.\n\n\nI give you understanding of the voices of dumb things\u2014the neigh of\nthe horse that a rider loves, the bark of the dog that has been\nman\u2019s friend throughout the years, and the purring of the cat on\nthe hearth. I give you the music of the day to stir your soul, and\nthe stillness of the night in which you hear, if you listen, the\nvoice of God.\n\n\nI give you the gentle breeze that kisses the face of a child, and\nthe wind that tosses the ship at sea: I give you tenderness and\nstrength. I give you the charity that comforts the sufferer and the\npity that softens the life of the poor. I give you the wisdom of\nhealth and the power to build up in your body a holy temple for\nyour soul. I give you the power to think and know and understand,\nthe power to love books and all beautiful things. I give you the\npower to win the love of little children and the power to hold your\nhead high among men.\n\n\nI give you the waters of the Earth, with the right to listen to the\nwhisper of the stream as it rises in the hills, to the chatter of\nthe river as it gathers and widens, and to the shout of the cataract\nas it splashes through the rocks. I give you the beauty of the\nmoving sea when it kisses the Sun, and the vision of the liquid\npeaks that rise and fall. I give you the slowly creeping waves that\nhave never been still since the seas were made, and the rocks they\nhave ground into golden sands.\n\n\nI give you the oceans in calm and storm, with the waters that dance\nin the air, the showers and the winds, the snow that clothes the\nworld anew in the night, the rain that taps on the window, and the\nrainbow that springs out of the Sun.\n\n\nI give you, free for ever, with the right to take whom you will,\nthe full enjoyment of the Natural Gallery of everlasting pictures,\nand the right to see the unveiling of all the sunsets, the covering\nof the heath with red and gold, the floating past of the clouds\nthat ride like mountain peaks across the sky. I give you access to\nall the bushes laden with berries, to the daffodils and the violet\nbeds, to the place where ferns and mosses hide, and to the tulips\nwhen they hang their heads at night.\n\n\nI give to you the power to remember and the power to forget, and I\ngive you the strength to forgive. I give you the love of the quiet\nplaces where the burden of the petty things will fall away. I give\nyou the right to wander by the brook that babbles o\u2019er the pebbles,\nto rise early in the morning and see the dew on every buttercup,\nto lose yourself among the heather and in the field of the cloth\nof gold.\n\n\nI give you the Past with its heritage of good and ill. I give you\nthe Present, with the opportunity that knows no bound. I give you\nthe Future, with the years that never end and know no sorrow.\n\n\nI give to you the long, long thoughts of youth and the memories of\nthe years; the hope of the dawning life, the dream of the days to\nbe, and the looking back. I give you the yearning and the craving\nthat make life sweet. I give you the time of waiting and the time\nof fulfilment. I give you the spirit that good fortune does not mar\nnor ill fortune break.\n\n\nI give you the calm that looks out upon the world and will not be\ndiscomforted. I give you the heart that does not quail; the courage\nthat does not flinch; the faith that will not fail in the Valley\nof the Shadow. I give you the power to believe in the everlasting\nspirit of the world.\n\n\nI give you the love of true things, the love of pure things, and\nthe companionship of sweet liberty. I give you the scorn of all\nignoble things, the hate of all things evil, and the strength to\nmarch breast-forward against them until they are destroyed.\n\n\nI give you the promise that they shall be destroyed, that the face\nof the Earth shall be fair, that the mind of man shall be free,\nthat all that come from God shall yet return to Him, that little\nchildren yet shall see the Dawn that no man knows.\n\n\nFrom Arthur Mee\u2019s Children\u2019s Encyclopedia, Volume 1\n\n\nMisc.\n\n\nApplications-\nVirtualBox\nHit Play button\n\n\nApplications-\nUtilities-\nTerminal\nssh osboxes@192.168.56.101\nmkdir web\nmkdir web/docs\nmkdir web/docs/images\nexit\n\n\nssh osboxes@192.168.56.101\ncd web\nmkdocs serve --dev-addr=0.0.0.0:8000\n\n\nfirefox http://192.168.56.101:8000\n\n\nTextWrangler\nsftp\nosboxes\nosboxes.org", 
            "title": "Typing"
        }, 
        {
            "location": "/typing/#compsci-typing-class", 
            "text": "Goals  Build muscle memory  Hit correct key without thinking  Type without ever looking at the keyboard  Always use correct finger to strike correct key    Hand Position  Both index fingers should be on the home keys, F and J, feel for the raised dot on F and J, without looking  8 fingers, left to right, are always on the home keys: ASDF JKL;  Both thumbs should rest on the SPACE bar  Fingers should be curved  Both palms should float above the keyboard  Most typists use their right thumb to strike the SPACE bar  Always practice without looking at the keyboard (cover your hands with cardboard)  Age doesn't matter (3rd graders okay) but hand size does matter, especially the range of the pinkies    Finger Placement     Body positioning  Notice ( in the drawing below ) that her wrists DO NOT rest on the desk in front of the keyboard  Alternatively, it is okay to have your elbows  below the keyboard  and your wrists resting on the desk in front of the keyboard    Notice that her chair sits high enough so that her elbows are at about the same height as the keyboard  Alternatively, it is okay to have your chair lower such that your elbows are below the keyboard and your wrists rest upon the desk in front of the keyboard    Notice her good posture  Notice that her feet are on the ground (get a footrest or large book if necessary)  Notice that her knee angle is 90 degrees  Notice that her elbow angle is 90 degrees  Notice that her seat back angle is 90 degrees", 
            "title": "CompSci Typing Class"
        }, 
        {
            "location": "/typing/#the-almena-method-almena-king-of-jamaica", 
            "text": "Learning where the keys are on the keyboard mnenomically  Letters, from top to bottom, from left pinky to right pinky:  qaz wsx edc rtf tgb yhn ujm ik, ol. p    Jingles per finger  Index fingers  Run From Vicky To Get Betty  RFVTGB  You Have Nothing, Uncle Joe's Mad  YHNUJM    Middle fingers  Every Dollar Counts  EDC  I'm King Comma  IK,    Ring fingers  Want Something Extra  WSX  Over Longer Periods  OL.    Pinkies  Quiet Aunt Zelda  QAZ  Pretty  P", 
            "title": "The Almena Method, Almena King of Jamaica"
        }, 
        {
            "location": "/typing/#activities-caps-lock-on", 
            "text": "Activity 1  THIS IS WHAT I LIKE  THIS IS WHAT I LOVE  THIS IS WHAT I NEED    Activity 2  THERE ARE SOME THINGS I LIKE  THERE ARE SOME THINGS I LOVE  THERE ARE SOME THINGS I NEED    Activity 3  GOOD THINGS COME TO THOSE WHO WAIT  GOOD THINGS COME TO THOSE WHO SHARE  GOOD THINGS COME TO THOSE WHO SHARE WHILE WAITING    Activity 4  I LIKE TO READ GOOD BOOKS, THEN RELAX  I LIKE TO READ GOOD BOOKS, THEN DOZE OFF  I LIKE TO READ GOOD BOOKS, THEN ENJOY A DRIVE    Activity 5, home row  asdfg ;lkjh  fjgh jfhg a;  asdfg hjkl;  fdsa ;lkj jfhg    Activity 99 , at the bottom, just do it, make a list of difficult words and do them ten times each", 
            "title": "Activities CAPS LOCK ON"
        }, 
        {
            "location": "/typing/#resources", 
            "text": "http://almenatyping.com/  https://www.youtube.com/watch?v=Df8qKN0H36k", 
            "title": "Resources"
        }, 
        {
            "location": "/typing/#credits", 
            "text": "The excellent and educational images shown here are kindly shared by wikimedia:  https://upload.wikimedia.org/wikipedia/commons/3/35/Computer_Workstation_Variables.jpg  http://www.psgtech.edu/Tamilkeyboard/images/old/2.png  https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/QWERTY-home-keys-position.svg/2000px-QWERTY-home-keys-position.svg.png  https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Touch_typing.svg/790px-Touch_typing.svg.png  https://upload.wikimedia.org/wikipedia/commons/7/79/FingerHandPosUSA.gif \nActivity 99 is from Arthur Mee\u2019s Children\u2019s Encyclopedia, Volume 1", 
            "title": "Credits:"
        }, 
        {
            "location": "/typing/#license", 
            "text": "Many images and text found here were created and shared by wikipedia editors under this license: Creative Commons Attribution-ShareAlike License   I, Nature, give to you, to be yours for ever and ever, the right\nto the free enjoyment of this world. I give to you the years that\nare before you, and the world that is about you.  I give to you the Sun by day and the Moon and stars by night, with\nthe power to wake as the Earth rolls into the light of the Sun, and\npower to sleep when the night comes.  I give to you the beauty of the Earth in the golden hour of dawn,\nwith the vision of the Sun as it climbs above the hills, with the\nglow of fire across the meadow and the sparkle on the river that\nruns past. The sight of the new stirring of the life of the world,\nthe sound of all moving things that praise their Maker, the feeling\nthat uplifts the heart as the light breaks on another day, are\nyours.  I give you the eager hope of spring, with the right to see the slow\ndisrobing of the winter earth and the slow unveiling of her secret\ntreasury. I give to you the untold glory of a summer\u2019s day, with\nthe touch of God in every lane and the fire of the Sun in every\nrose. I give to you the eternal promise of autumn, with the faith\nof all growing things in the life that will come again. I give to\nyou the peace of the Earth on a winter\u2019s day, with the robe of\nstainless white not made with hands. I give to you the full glory\nof the changing year, and perfect trust in the ways of God that\nhave never failed upon the Earth.  I give to you the quiet of the hilltop, the vision of the smiling\nworld that opens out below, the green fields that stretch far away\nuntil they touch the sky. I give you the path that brings you to\nthe valley, with the trees that rise like silent sentinels to guard\nthe peace of the woodland walks where you may be alone. I give you\nthe thrill of heights where a man can think no mean thing, and the\ncalm of the hidden places where little children seek and find the\nkey of the Kingdom of Heaven.  The leaping joy of spring, the glittering dance of summer, the\nrustling of the leaves in autumn, the stillness and strengthening\nof the winter, I give to you. I give to you the ceaseless wonder\nof the day and night, and the seasons as they pass.  I give you the song that has been in the world since the birds began\nto sing, the joyous hymn of the lark and the plaintive music of the\nnightingale: the beauty that has been on Earth since flowers began\nto peep: the silver lamps that have hung in the sky since the stars\nbegan to shine.  I give you understanding of the voices of dumb things\u2014the neigh of\nthe horse that a rider loves, the bark of the dog that has been\nman\u2019s friend throughout the years, and the purring of the cat on\nthe hearth. I give you the music of the day to stir your soul, and\nthe stillness of the night in which you hear, if you listen, the\nvoice of God.  I give you the gentle breeze that kisses the face of a child, and\nthe wind that tosses the ship at sea: I give you tenderness and\nstrength. I give you the charity that comforts the sufferer and the\npity that softens the life of the poor. I give you the wisdom of\nhealth and the power to build up in your body a holy temple for\nyour soul. I give you the power to think and know and understand,\nthe power to love books and all beautiful things. I give you the\npower to win the love of little children and the power to hold your\nhead high among men.  I give you the waters of the Earth, with the right to listen to the\nwhisper of the stream as it rises in the hills, to the chatter of\nthe river as it gathers and widens, and to the shout of the cataract\nas it splashes through the rocks. I give you the beauty of the\nmoving sea when it kisses the Sun, and the vision of the liquid\npeaks that rise and fall. I give you the slowly creeping waves that\nhave never been still since the seas were made, and the rocks they\nhave ground into golden sands.  I give you the oceans in calm and storm, with the waters that dance\nin the air, the showers and the winds, the snow that clothes the\nworld anew in the night, the rain that taps on the window, and the\nrainbow that springs out of the Sun.  I give you, free for ever, with the right to take whom you will,\nthe full enjoyment of the Natural Gallery of everlasting pictures,\nand the right to see the unveiling of all the sunsets, the covering\nof the heath with red and gold, the floating past of the clouds\nthat ride like mountain peaks across the sky. I give you access to\nall the bushes laden with berries, to the daffodils and the violet\nbeds, to the place where ferns and mosses hide, and to the tulips\nwhen they hang their heads at night.  I give to you the power to remember and the power to forget, and I\ngive you the strength to forgive. I give you the love of the quiet\nplaces where the burden of the petty things will fall away. I give\nyou the right to wander by the brook that babbles o\u2019er the pebbles,\nto rise early in the morning and see the dew on every buttercup,\nto lose yourself among the heather and in the field of the cloth\nof gold.  I give you the Past with its heritage of good and ill. I give you\nthe Present, with the opportunity that knows no bound. I give you\nthe Future, with the years that never end and know no sorrow.  I give to you the long, long thoughts of youth and the memories of\nthe years; the hope of the dawning life, the dream of the days to\nbe, and the looking back. I give you the yearning and the craving\nthat make life sweet. I give you the time of waiting and the time\nof fulfilment. I give you the spirit that good fortune does not mar\nnor ill fortune break.  I give you the calm that looks out upon the world and will not be\ndiscomforted. I give you the heart that does not quail; the courage\nthat does not flinch; the faith that will not fail in the Valley\nof the Shadow. I give you the power to believe in the everlasting\nspirit of the world.  I give you the love of true things, the love of pure things, and\nthe companionship of sweet liberty. I give you the scorn of all\nignoble things, the hate of all things evil, and the strength to\nmarch breast-forward against them until they are destroyed.  I give you the promise that they shall be destroyed, that the face\nof the Earth shall be fair, that the mind of man shall be free,\nthat all that come from God shall yet return to Him, that little\nchildren yet shall see the Dawn that no man knows.  From Arthur Mee\u2019s Children\u2019s Encyclopedia, Volume 1", 
            "title": "License:"
        }, 
        {
            "location": "/typing/#misc", 
            "text": "Applications- VirtualBox\nHit Play button  Applications- Utilities- Terminal\nssh osboxes@192.168.56.101\nmkdir web\nmkdir web/docs\nmkdir web/docs/images\nexit  ssh osboxes@192.168.56.101\ncd web\nmkdocs serve --dev-addr=0.0.0.0:8000  firefox http://192.168.56.101:8000  TextWrangler\nsftp\nosboxes\nosboxes.org", 
            "title": "Misc."
        }
    ]
}